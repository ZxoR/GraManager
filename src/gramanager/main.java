package gramanager;

import static java.lang.System.exit;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author yonatan
 */
public class main extends javax.swing.JFrame {

    Connection c = null;
    Statement stmt = null;

    /**
     * Creates new form main
     */
    public main() throws SQLException {
        initComponents();

        try {
            Class.forName("org.sqlite.JDBC");
            c = DriverManager.getConnection("jdbc:sqlite:gramanager.db");

        } catch (ClassNotFoundException | SQLException e) {
            System.err.println(e.getClass().getName() + ": " + e.getMessage());
            System.exit(0);
        }
        //create if not exists
        stmt = c.createStatement();
        String sql = null;
        try {
            sql = "CREATE TABLE IF NOT EXISTS \"dealInformation\" ("
                    + "    \"dealID\" INTEGER NOT NULL,"
                    + "    \"buyerID\" INTEGER NOT NULL,"
                    + "    \"buyerName\" TEXT,"
                    + "    \"buyerOrdered\" REAL,"
                    + "    \"buyerPaid\" INTEGER DEFAULT (0)"
                    + ");";
            stmt.executeUpdate(sql);

            sql = "CREATE TABLE IF NOT EXISTS \"dealslist\" ("
                    + "    \"id\" INTEGER PRIMARY KEY AUTOINCREMENT,"
                    + "    \"dealName\" TEXT,"
                    + "    \"dealWith\" TEXT,"
                    + "    \"dealLocation\" TEXT,"
                    + "    \"dealDate\" TEXT,"
                    + "    \"pricePerGram\" INTEGER"
                    + ");";
            stmt.executeUpdate(sql);
        } catch (Exception e) {
            System.err.printf("Exection handled: No input for new deal. Message from handler: " + e.getMessage());
        }

        System.out.println(
                "Opened database successfully");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        dealInformation = new javax.swing.JTable();
        insertButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        dealsList = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        dealName = new javax.swing.JTextField();
        dealWith = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        dealLocation = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        dealDate = new javax.swing.JTextField();
        loadDeals = new javax.swing.JButton();
        dealIdField = new javax.swing.JTextField();
        saveDealButton = new javax.swing.JButton();
        dealAdd = new javax.swing.JButton();
        dealRemove = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        pricePerGram = new javax.swing.JSlider();
        ppgLable = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Summary = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GraManager");
        setMinimumSize(new java.awt.Dimension(869, 359));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        dealInformation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Name", "Ordered (g)", "Paid"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Float.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dealInformation.setToolTipText("Customers list");
        dealInformation.getTableHeader().setReorderingAllowed(false);
        dealInformation.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dealInformationPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(dealInformation);
        if (dealInformation.getColumnModel().getColumnCount() > 0) {
            dealInformation.getColumnModel().getColumn(0).setMaxWidth(45);
        }

        insertButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/add.png"))); // NOI18N
        insertButton.setText("Insert");
        insertButton.setToolTipText("<html><b>INSERT</b> - To insert new customer");
        insertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertButtonActionPerformed(evt);
            }
        });

        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/delete-icon.png"))); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.setToolTipText("<html><b>DELETE</b> - To delete customer from the list</html>");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        dealsList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Deal"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dealsList.setToolTipText("Deals list");
        dealsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dealsListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(dealsList);
        if (dealsList.getColumnModel().getColumnCount() > 0) {
            dealsList.getColumnModel().getColumn(0).setMinWidth(25);
            dealsList.getColumnModel().getColumn(0).setMaxWidth(30);
        }

        jLabel1.setText("Deal name:");

        dealName.setToolTipText("Deal name");
        dealName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dealNameActionPerformed(evt);
            }
        });

        dealWith.setToolTipText("The name of the dealer");
        dealWith.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dealWithActionPerformed(evt);
            }
        });

        jLabel2.setText("Deal with:");

        dealLocation.setToolTipText("The location of the deal");
        dealLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dealLocationActionPerformed(evt);
            }
        });

        jLabel3.setText("Deal location:");

        jLabel4.setText("Deal date:");

        dealDate.setToolTipText("The date of the deal");
        dealDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dealDateActionPerformed(evt);
            }
        });

        loadDeals.setText("Refresh");
        loadDeals.setToolTipText("<html><b>REFRESH</b> - Refresh the list from the database</html>");
        loadDeals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDealsActionPerformed(evt);
            }
        });

        dealIdField.setEnabled(false);

        saveDealButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/save.png"))); // NOI18N
        saveDealButton.setText("Save");
        saveDealButton.setToolTipText("<html><b>SAVE</b> - to save the deal</html>");
        saveDealButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveDealButtonActionPerformed(evt);
            }
        });

        dealAdd.setText("Add");
        dealAdd.setToolTipText("<html><b>ADD</b> - Add new deal to the list</html>");
        dealAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dealAddActionPerformed(evt);
            }
        });

        dealRemove.setText("Remove");
        dealRemove.setToolTipText("<html><b>REMOVE</b> - To remove deal from the deals list</html>");
        dealRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dealRemoveActionPerformed(evt);
            }
        });

        jLabel5.setText("Price (₪/g)");

        pricePerGram.setMaximum(250);
        pricePerGram.setPaintLabels(true);
        pricePerGram.setPaintTicks(true);
        pricePerGram.setToolTipText("Use this tool to choose the price. Price per gram is New Israeli Shekel's.");
        pricePerGram.setValue(1);
        pricePerGram.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pricePerGramStateChanged(evt);
            }
        });

        ppgLable.setText("NaN₪/g");
        ppgLable.setToolTipText("");

        Summary.setColumns(20);
        Summary.setRows(5);
        Summary.setToolTipText("Summary log");
        Summary.setAutoscrolls(false);
        Summary.setMinimumSize(new java.awt.Dimension(0, 0));
        jScrollPane3.setViewportView(Summary);

        jMenu1.setText("Database");

        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/refresh01.png"))); // NOI18N
        jMenuItem1.setText("Refresh");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/Aqua-Ball-Red-icon.png"))); // NOI18N
        jMenuItem2.setText("Self Destruction");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/exit.png"))); // NOI18N
        jMenuItem3.setText("Exit");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("About");

        jMenuItem4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/information.png"))); // NOI18N
        jMenuItem4.setText("Information");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dealAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dealRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loadDeals))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(insertButton, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveDealButton, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dealWith)
                            .addComponent(dealLocation)
                            .addComponent(dealDate)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(dealIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dealName))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pricePerGram, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ppgLable, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(loadDeals)
                            .addComponent(dealRemove)
                            .addComponent(dealAdd)
                            .addComponent(deleteButton)
                            .addComponent(saveDealButton)
                            .addComponent(insertButton)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(dealName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dealIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(dealWith, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dealLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(dealDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ppgLable, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pricePerGram, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                        .addGap(31, 31, 31))
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void insertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) dealInformation.getModel();
        model.addRow(new Object[]{1 + getLastId(), "", 0.00, false});
        makeSummary();
    }//GEN-LAST:event_insertButtonActionPerformed
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int selectedRow = dealInformation.getSelectedRow();
        if (selectedRow >= 0) {
            DefaultTableModel model = (DefaultTableModel) dealInformation.getModel();
            model.removeRow(selectedRow);
        }
        makeSummary();
    }//GEN-LAST:event_deleteButtonActionPerformed
    private void loadDealsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDealsActionPerformed
        try {
            cleanAndDisableInformation();
            loadDeals();        // TODO add your handling code here:

        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(main.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_loadDealsActionPerformed
    private void dealsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dealsListMouseClicked
        if (evt.getClickCount() == 2) {
            JTable target = (JTable) evt.getSource();
            int row = target.getSelectedRow();
            DefaultTableModel model = (DefaultTableModel) dealsList.getModel();
            int dealID = (int) dealsList.getValueAt(row, 0);
            enableInformation();
            try {
                loadDealID(dealID);

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(main.class
                        .getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(main.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            System.out.println(row);
        }
    }//GEN-LAST:event_dealsListMouseClicked
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        cleanAndDisableInformation();
//login form to decrypt data
        try {
            loadDeals();

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(main.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(main.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowOpened
    public String MD5(String md5) {
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");
            byte[] array = md.digest(md5.getBytes());
            StringBuffer sb = new StringBuffer();
            for (int i = 0; i < array.length; ++i) {
                sb.append(Integer.toHexString((array[i] & 0xFF) | 0x100).substring(1, 3));
            }
            return sb.toString();
        } catch (java.security.NoSuchAlgorithmException e) {
        }
        return null;
    }
    private void saveDealButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveDealButtonActionPerformed
        try {
            saveDeal();

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(main.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(main.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        makeSummary();
    }//GEN-LAST:event_saveDealButtonActionPerformed
    private void dealAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dealAddActionPerformed
        try {
            addDeal();

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(main.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(main.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_dealAddActionPerformed
    private void dealRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dealRemoveActionPerformed

        try {
            removeDeal();        // TODO add your handling code here:

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(main.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(main.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_dealRemoveActionPerformed
    private void pricePerGramStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pricePerGramStateChanged
        ppgLable.setText(Integer.toString(pricePerGram.getValue()) + "₪/g");
        makeSummary();
    }//GEN-LAST:event_pricePerGramStateChanged
    private void dealNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dealNameActionPerformed
        makeSummary();        // TODO add your handling code here:
    }//GEN-LAST:event_dealNameActionPerformed
    private void dealWithActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dealWithActionPerformed
        makeSummary();        // TODO add your handling code here:
    }//GEN-LAST:event_dealWithActionPerformed
    private void dealLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dealLocationActionPerformed
        makeSummary();        // TODO add your handling code here:
    }//GEN-LAST:event_dealLocationActionPerformed
    private void dealDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dealDateActionPerformed
        makeSummary();        // TODO add your handling code here:
    }//GEN-LAST:event_dealDateActionPerformed
    private void dealInformationPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dealInformationPropertyChange
        if (dealName.getText().isEmpty()) {
            return;
        }
        try {
            saveDeal();

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(main.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(main.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        makeSummary();        // TODO add your handling code here:
    }//GEN-LAST:event_dealInformationPropertyChange

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {
            cleanAndDisableInformation();
            loadDeals();

        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(main.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        int reply = JOptionPane.showConfirmDialog(null, "Are you sure you want to exit GraManager?", "Exit?", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            exit(0);
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        int reply = JOptionPane.showConfirmDialog(null, "Are you sure you want to Self Destruct and remove ALL THE DATA? Data coul'd not be recovered...", "Self Destruction Alert!", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            try {
                selfDestruction();
            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                cleanAndDisableInformation();
                try {
                    loadDeals();
                } catch (ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                }
                JOptionPane.showMessageDialog(this, "All the data has been destroyed successfully!", "Self Destruction", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        JOptionPane.showMessageDialog(this, "Welcome to GraManager.\n"
                + "The software was built by ZxoR.\n"
                + "The use is the responsibility of the user.\n"
                + "Do not use the software for illegal purposes.\n"
                + "Current version: 1.3v.", "Information", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem4ActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new main().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Summary;
    private javax.swing.JButton dealAdd;
    private javax.swing.JTextField dealDate;
    private javax.swing.JTextField dealIdField;
    private javax.swing.JTable dealInformation;
    private javax.swing.JTextField dealLocation;
    private javax.swing.JTextField dealName;
    private javax.swing.JButton dealRemove;
    private javax.swing.JTextField dealWith;
    private javax.swing.JTable dealsList;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton insertButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton loadDeals;
    private javax.swing.JLabel ppgLable;
    private javax.swing.JSlider pricePerGram;
    private javax.swing.JButton saveDealButton;
    // End of variables declaration//GEN-END:variables
private int getLastId() {
        DefaultTableModel model = (DefaultTableModel) dealInformation.getModel();
        int rowCount = model.getRowCount();
        if (rowCount <= 0) {
            return 0;
        } else {
            int lastid = Integer.parseInt(model.getValueAt(rowCount - 1, 0).toString());
            return lastid;
        }
    }

    private void loadDeals() throws ClassNotFoundException, SQLException {
        DefaultTableModel model = (DefaultTableModel) dealsList.getModel();
        model.setRowCount(0);
        stmt = c.createStatement();
        ResultSet rs = stmt.executeQuery("SELECT * FROM dealsList;");
        while (rs.next()) {
            int id = rs.getInt("id");
            String dealName = rs.getString("dealName");
            String dealWith = rs.getString("dealWith");
            String dealLocation = rs.getString("dealLocation");
            String dealDate = rs.getString("dealDate");
            model.addRow(new Object[]{id, dealName});
        }
        rs.close();
        stmt.close();
    }

    private void makeSummary() {
        if (dealIdField.getText().isEmpty()) {
            return;
        }
        float paid = 0;
        float unpaid = 0;
        int mPaid = 0;
        int mUnpaid = 0;
        float grams = 0;
        Summary.setText(null);
        Summary.append("--- Deal Information: ---\n");
        Summary.append("Deal name: " + dealName.getText() + "\n");
        Summary.append("Deal with: " + dealWith.getText() + "\n");
        Summary.append("Deal location: " + dealLocation.getText() + "\n");
        Summary.append("Deal date: " + dealDate.getText() + "\n");
        Summary.append("Price per gram (₪/g): " + pricePerGram.getValue() + "₪/g\n\n");
        Summary.append("--- Customers: ---\n");
        for (int row = 0; row < dealInformation.getRowCount(); row++) {
            float total = Float.parseFloat(dealInformation.getValueAt(row, 2).toString()) * pricePerGram.getValue();
            String didPaid;
            if (dealInformation.getValueAt(row, 3).toString() == "false") {
                didPaid = "[NOT PAID]";
                unpaid += total;
                mUnpaid++;
            } else {
                didPaid = "[PAID]";
                paid += total;
                mPaid++;
            }
            grams += Float.parseFloat(dealInformation.getValueAt(row, 2).toString());
            Summary.append("[" + (row + 1) + "] '" + dealInformation.getValueAt(row, 1).toString() + "' ordered " + dealInformation.getValueAt(row, 2).toString() + "g. Total of: " + total + "₪ " + didPaid + ".\n");
        }
        Summary.append("--- Deal Summary: ---\n");
        Summary.append("Customers: " + (mPaid + mUnpaid) + ".\n");
        Summary.append("Already paid: " + paid + "₪ from " + mPaid + " customers.\n");
        Summary.append("Unpaid yet: " + unpaid + "₪ from " + mUnpaid + " customers.\n");
        Summary.append("Deal total cost: " + (paid + unpaid) + "₪.\n");
        Summary.append("Deal total grams: " + grams + "g.\n");
        Summary.append("--- EOF Summary ---\n");

    }

    private void cleanAndDisableInformation() {
        dealName.setEnabled(false);
        dealWith.setEnabled(false);
        dealLocation.setEnabled(false);
        dealDate.setEnabled(false);
        dealName.setText("");
        dealWith.setText("");
        dealLocation.setText("");
        dealDate.setText("");
        dealIdField.setText("");
        ppgLable.setText("");
        pricePerGram.enable(false);
        pricePerGram.setValue(0);
        DefaultTableModel model = (DefaultTableModel) dealInformation.getModel();
        model.setRowCount(0);
        deleteButton.setEnabled(false);
        saveDealButton.setEnabled(false);
        insertButton.setEnabled(false);
        Summary.enable(false);
        Summary.setText(null);
        Summary.setEditable(false);
    }

    private void enableInformation() {
        dealName.setEnabled(true);
        dealWith.setEnabled(true);
        dealLocation.setEnabled(true);
        dealDate.setEnabled(true);
        dealName.setText("");
        dealWith.setText("");
        dealLocation.setText("");
        dealDate.setText("");
        DefaultTableModel model = (DefaultTableModel) dealInformation.getModel();
        model.setRowCount(0);
        deleteButton.setEnabled(true);
        saveDealButton.setEnabled(true);
        insertButton.setEnabled(true);
        pricePerGram.enable(true);
        Summary.enable(true);
        Summary.setEditable(false);
    }

    private void loadDealID(int id) throws ClassNotFoundException, SQLException {
        DefaultTableModel model = (DefaultTableModel) dealInformation.getModel();
        model.setRowCount(0);
        stmt = c.createStatement();
        String idToString = "" + id;
        dealIdField.setText(idToString);
        ResultSet rs = stmt.executeQuery("SELECT * FROM dealInformation WHERE dealID='" + idToString + "' ;");
        while (rs.next()) {
            int buyerID = rs.getInt("buyerID");
            String buyerName = rs.getString("buyerName");
            float buyerOrdered = rs.getFloat("buyerOrdered");
            Boolean buyerPaid = rs.getBoolean("buyerPaid");
            model.addRow(new Object[]{buyerID, buyerName, buyerOrdered, buyerPaid});
        }
        rs.close();
        stmt.close();
        stmt = c.createStatement();
        rs = stmt.executeQuery("SELECT * FROM dealslist WHERE id='" + idToString + "' ;");
        while (rs.next()) {
            dealName.setText(rs.getString("dealName"));
            dealWith.setText(rs.getString("dealWith"));
            dealLocation.setText(rs.getString("dealLocation"));
            dealDate.setText(rs.getString("dealDate"));
            pricePerGram.setValue(rs.getInt("pricePerGram"));
        }
        rs.close();
        stmt.close();
    }

    private void removeDeal() throws ClassNotFoundException, SQLException {
        int selectedRow = dealsList.getSelectedRow();
        String sql;
        try {
            stmt = c.createStatement();

        } catch (SQLException ex) {
            Logger.getLogger(main.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        if (selectedRow >= 0) {
            //DefaultTableModel model = (DefaultTableModel) dealsList.getModel();
            String deleteId = dealsList.getValueAt(selectedRow, 0).toString();
            try {
                sql = "DELETE FROM dealInformation WHERE dealID='" + deleteId + "' ;";

                stmt.executeUpdate(sql);
                sql = "DELETE FROM dealslist WHERE id='" + deleteId + "' ;";
                stmt.executeUpdate(sql);
            } finally {
                stmt.close();
                loadDeals();
                String now = dealIdField.getText();
                if (deleteId.equals(now)) {
                    cleanAndDisableInformation();
                }
            }
        }
    }

    private String enc(String text, String key) {
        try {
            Key aesKey = new SecretKeySpec(key.getBytes(), "AES");
            Cipher cipher = Cipher.getInstance("AES");
            cipher.init(Cipher.ENCRYPT_MODE, aesKey);
            byte[] encrypted = cipher.doFinal(text.getBytes());
            return new String(encrypted);
        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException e) {
            e.printStackTrace();
        }
        return null;
    }

    private String dec(byte[] text, String key) {
        try {
            Key aesKey = new SecretKeySpec(key.getBytes(), "AES");
            Cipher cipher = Cipher.getInstance("AES");
            cipher.init(Cipher.DECRYPT_MODE, aesKey);
            String decrypted = new String(cipher.doFinal(text));
            return decrypted;
        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException e) {
            e.printStackTrace();
        }
        return null;
    }

    private void addDeal() throws ClassNotFoundException, SQLException {
        stmt = c.createStatement();
        String sql = null;
        try {
            String dName = JOptionPane.showInputDialog(this, "Plese enter the deal name:", "New deal", JOptionPane.PLAIN_MESSAGE);
            dName = dName.isEmpty() ? "Default deal" : dName;
            sql = "INSERT INTO dealslist (dealName,dealWith,dealLocation,dealDate,pricePerGram) VALUES ('" + dName + "', '', '', '',100);";
            stmt.executeUpdate(sql);
            loadDeals();
        } catch (Exception e) {
            System.err.printf("Exection handled: No input for new deal. Message from handler: " + e.getMessage());
        }
    }

    private void saveDeal() throws ClassNotFoundException, SQLException {
        if (dealName.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Deal name can't be empty.\nData NOT SAVED!!!", "Oops...", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            stmt = c.createStatement();

        } catch (SQLException ex) {
            Logger.getLogger(main.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        String idToString = dealIdField.getText();
        String sql = null;
        try {
            sql = "DELETE FROM dealInformation WHERE dealID='" + idToString + "' ;";
            stmt.executeUpdate(sql);
            int bPPG = pricePerGram.getValue();
            sql = "UPDATE dealslist set dealName = '" + dealName.getText() + "', dealWith = '" + dealWith.getText() + "', dealLocation= '" + dealLocation.getText() + "', pricePerGram=" + bPPG + " ,dealDate = '" + dealDate.getText() + "'  where id=" + dealIdField.getText() + ";";
            stmt.executeUpdate(sql);

        } catch (SQLException ex) {
            Logger.getLogger(main.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        for (int row = 0; row < dealInformation.getRowCount(); row++) {
            String dID = dealIdField.getText();
            String bID = dealInformation.getValueAt(row, 0).toString();
            String bName = dealInformation.getValueAt(row, 1).toString();
            String bOrdered = dealInformation.getValueAt(row, 2).toString();
            String bPaid = dealInformation.getValueAt(row, 3).toString();
            bPaid = bPaid.equals("false") ? "0" : "1";

            sql = "INSERT INTO dealinformation (dealID,buyerID,buyerName,buyerOrdered,buyerPaid) VALUES (" + dID + ", " + bID + ", '" + bName + "', " + bOrdered + ", " + bPaid + ");";
            stmt.executeUpdate(sql);
            System.out.println(sql);
        }
        loadDeals();
    }

    private void selfDestruction() throws ClassNotFoundException, SQLException {
        stmt = c.createStatement();
        String sql = null;
        try {
            sql = "DELETE FROM dealslist;";
            stmt.executeUpdate(sql);
            sql = "DELETE FROM dealInformation;";
            stmt.executeUpdate(sql);
            sql = "delete from sqlite_sequence where name='dealInformation'; delete from sqlite_sequence where name='dealslist';;";
            stmt.executeUpdate(sql);
            loadDeals();
        } catch (Exception e) {
            System.err.printf("Exection handled: DELETE all databases. Message from handler: " + e.getMessage());
        }
    }

}
